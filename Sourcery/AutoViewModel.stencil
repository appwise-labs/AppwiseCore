import AppwiseCore
{% macro associatedTypeFor vmType %}{% filter removeNewlines:"all" %}
	{% for var in vmType.variables where var.name == "data" %}
		{{ var.typeName }}
	{% endfor %}
{% endfilter %}{% endmacro %}
{% macro resolveTypeName var %}{% filter removeNewlines:"all" %}
	{% if var|hasPrefix:"Model." %}
		{{ var|replace:"Model.","" }}
	{% else %}
		{{ var }}
	{% endif %}
{% endfilter %}{% endmacro %}
{% macro listProperties modelType viewModelType %}
	{% for var in modelType.allVariables %}
	{% set exists %}{% if viewModelType %}{% call propertyAlreadyExists var viewModelType %}{% endif %}{% endset %}
	{% if not exists %}
	{% set vmTypeName %}{% call viewModelFor var.type %}{% endset %}
	var {{ var.name }}: {% if vmTypeName %}{{ vmTypeName }}{% if var.typeName.isOptional %}?{% endif %}{% else %}{{ var.typeName }}{% endif %} {
		{% if vmTypeName %}
		return vm(data.{{ var.name }})
		{% else %}
		return data.{{ var.name }}
		{% endif %}
	}
	{% endif %}
	{% endfor %}
	{% if modelType.inheritedTypes.first and modelType.inheritedTypes.first != "NSManagedObject" %}
	{% call listProperties modelType.inheritedTypes.first viewModelType %}
	{% endif %}
{% endmacro %}
{% macro propertyAlreadyExists var viewModelType %}{% filter removeNewlines:"all" %}
	{% for typeVar in viewModelType.variables where typeVar.name == var.name %}
		EXISTS
	{% endfor %}
	{% if viewModelType.inheritedTypes.first != "ViewModel" %}
		{% for inheritedType in types.protocols where inheritedType.name == viewModelType.inheritedTypes.first %}
			{% call propertyAlreadyExists var inheritedType %}
		{% endfor %}
	{% endif %}
{% endfilter %}{% endmacro %}
{% macro viewModelFor dataType %}{% filter removeNewlines:"all" %}
	{% if dataType %}
		{% for vmType in types.based.ViewModel %}
			{% set associatedType %}{% call associatedTypeFor vmType %}{% endset %}
			{% set resolvedType %}{% call resolveTypeName associatedType %}{% endset %}
			{% if resolvedType == dataType.name %}
				{{ vmType.name }}
			{% endif %}
		{% endfor %}
	{% endif %}
{% endfilter %}{% endmacro %}

enum ViewModels {
}

{% for viewModelType in types.based.ViewModel %}
// MARK: - {{ viewModelType.name }}

{% set associatedType %}{% call associatedTypeFor viewModelType %}{% endset %}
extension {{ viewModelType.name }} {
	{% if viewModelType.kind == "struct" %}{% if viewModelType.initializers|isEmpty %}
	init(_ data: {{ associatedType }}) {
		self.data = data
		{% if viewModelType|based:"NSObject" %}
		super.init()
		{% endif %}
	}

	{% endif %}{% endif %}
	{% set resolvedType %}{% call resolveTypeName associatedType %}{% endset %}
	{% call listProperties type[resolvedType] viewModelType %}
}

{% endfor %}
